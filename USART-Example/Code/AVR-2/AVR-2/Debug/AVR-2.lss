
AVR-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fd  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056f  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
}
//--------------------------------------------------------------------------------------

void USART_Transmit(unsigned char data) {
	while (!(UCSRA & (1<<UDRE))); // Wait for empty transmit buffer
	UDR = data; // Put data into buffer, sends the data
  6c:	90 bd       	out	0x20, r25	; 32
  6e:	89 b9       	out	0x09, r24	; 9
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <USART_Receive>:
}
//--------------------------------------------------------------------------------------

unsigned char USART_Receive(void) {
	while (!(UCSRA & (1<<RXC))); // Wait for data to be received
  7a:	5f 9b       	sbis	0x0b, 7	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_Receive>
	return UDR; // Get and return received data from buffer
  7e:	8c b1       	in	r24, 0x0c	; 12
	
	
}
  80:	08 95       	ret

00000082 <main>:
#include "../../USART-Config.h"


int main(void)
{
    DDRA = 0xFF; // Set PORTA as output
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
    USART_Init(MYUBRR);
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
    while (1) 
    {
		PORTA = USART_Receive();
  8e:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_Receive>
  92:	8b bb       	out	0x1b, r24	; 27
  94:	fc cf       	rjmp	.-8      	; 0x8e <main+0xc>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
